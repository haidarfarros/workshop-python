# -*- coding: utf-8 -*-
"""pert6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ft3M5n5aPrJiwQpsOKoUuZ1J1tDEEzsq
"""

while True print('Hello world')
  File "<stdin>", line 1
    while True print('Hello world')

10 * (1/0)

4 + spam*3

'2' + 2

while True:
    try:
        x = int(input("Please enter a number: "))
        break
    except ValueError:
        print("Oops!  That was no valid number.  Try again...")

class B(Exception):
    pass

class C(B):
    pass

class D(C):
    pass

for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")

try:
    raise Exception('spam', 'eggs')
except Exception as inst:
    print(type(inst))    # the exception instance
    print(inst.args)     # arguments stored in .args
    print(inst)          # __str__ allows args to be printed directly,
                         # but may be overridden in exception subclasses
    x, y = inst.args     # unpack args
    print('x =', x)
    print('y =', y)

def this_fails():
    x = 1/0

try:
    this_fails()
except ZeroDivisionError as err:
    print('Handling run-time error:', err)

raise NameError('HiThere')

try:
    raise NameError('HiThere')
except NameError:
    print('An exception flew by!')
    raise

def func():
    raise ConnectionError

try:
    func()
except ConnectionError as exc:
    raise RuntimeError('Failed to open database') from exc

try:
    open('database.sqlite')
except OSError:
    raise RuntimeError from None

try:
    raise KeyboardInterrupt
finally:
    print('Goodbye, world!')

def bool_return():
    try:
        return True
    finally:
        return False

bool_return()

def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("division by zero!")
    else:
        print("result is", result)
    finally:
        print("executing finally clause")

divide(2, 1)

divide(2, 0)

divide("2", "1")